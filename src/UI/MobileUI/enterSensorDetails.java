/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.MobileUI;

import java.awt.geom.RoundRectangle2D;
import Classes.farm.SetOfFarm;
import Classes.farm.farms;
import Classes.sensors.Air_Temperature;
import Classes.sensors.Lights_Sensor;
import Classes.sensors.SetOfSensors;
import Classes.sensors.Soil_Acidity;
import Classes.sensors.Soil_Moisture;
import Classes.sensors.Soil_Temperature;
import Classes.sensors.sensorDetails;
import Classes.serialization.Serialization;
import Validations.validations;
import java.awt.HeadlessException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author Sachi
 */
public class enterSensorDetails extends javax.swing.JFrame {

    /**
     * Creates new form enterSensorDetails
     */
    String username, userLevel, email;
    public static SetOfFarm thefarms = new SetOfFarm();
    public static SetOfSensors theSensors = new SetOfSensors();
    public static SetOfSensors searchSensors = new SetOfSensors();
    public static final String FILE_NAME_Sensors = "DataFiles/Sensors.txt";
    public static final String Soil_Moisture = "Soil Moisture Sensor";
    public static final String Soil_Temperature = "Soil Temperature Sensor";
    public static final String Air_Temperature = "Air Temperature Sensor";
    public static final String Soil_Acidity = "Soil Acidity Sensor";
    public static final String Lights_Sensor = "Lights Sensor";
    public static final String FILE_NAME_farms = "DataFiles/farms.txt";

    public enterSensorDetails() {
        initComponents();

        this.setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 95, 95));

        try {
            for (farms farm : Serialization.deserializeFarm()) {
                thefarms.addfarm(farm);
                farm.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

        try {
            for (sensorDetails sensorDetails : Serialization.deserializeSensors()) {
                theSensors.addSensorDetails(sensorDetails);
                sensorDetails.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    public enterSensorDetails(String username, String userLevel, String email) {
        initComponents();

        this.setShape(new RoundRectangle2D.Double(0, 0, getWidth(), getHeight(), 95, 95));

        this.username = username;
        this.userLevel = userLevel;
        this.email = email;

        try {
            for (farms farm : Serialization.deserializeFarm()) {
                thefarms.addfarm(farm);
                farm.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

        try {
            for (sensorDetails sensorDetails : Serialization.deserializeSensors()) {
                theSensors.addSensorDetails(sensorDetails);
                sensorDetails.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();
        sms = new javax.swing.JTextField();
        sts = new javax.swing.JTextField();
        ats = new javax.swing.JTextField();
        sas = new javax.swing.JTextField();
        ls = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IM/MobileImages/OK.png"))); // NOI18N
        jButton3.setContentAreaFilled(false);
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/IM/MobileImages/OK1.png"))); // NOI18N
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 446, 100, 40));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IM/MobileImages/cancel.png"))); // NOI18N
        jButton2.setContentAreaFilled(false);
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/IM/MobileImages/cancel1.png"))); // NOI18N
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 446, 100, 40));

        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 530, 20, 20));

        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 530, 40, 30));

        sms.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        sms.setForeground(new java.awt.Color(102, 102, 102));
        sms.setText("Soil Moisture Sensor (%)");
        sms.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                smsMouseClicked(evt);
            }
        });
        sms.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                smsKeyTyped(evt);
            }
        });
        getContentPane().add(sms, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, 240, -1));

        sts.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        sts.setForeground(new java.awt.Color(102, 102, 102));
        sts.setText("Soil Temperature Sensor (RH)");
        sts.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stsMouseClicked(evt);
            }
        });
        sts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stsKeyTyped(evt);
            }
        });
        getContentPane().add(sts, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 260, 240, -1));

        ats.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        ats.setForeground(new java.awt.Color(102, 102, 102));
        ats.setText("Air Temperature Sensor (°C)");
        ats.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ats.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                atsMouseClicked(evt);
            }
        });
        ats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atsActionPerformed(evt);
            }
        });
        ats.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                atsKeyTyped(evt);
            }
        });
        getContentPane().add(ats, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 240, -1));

        sas.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        sas.setForeground(new java.awt.Color(102, 102, 102));
        sas.setText("Soil Acidity Sensor (pH)");
        sas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sasMouseClicked(evt);
            }
        });
        sas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sasKeyTyped(evt);
            }
        });
        getContentPane().add(sas, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, 240, -1));

        ls.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        ls.setForeground(new java.awt.Color(102, 102, 102));
        ls.setText("Lights Sensor (W/m²)");
        ls.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ls.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsMouseClicked(evt);
            }
        });
        ls.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lsKeyTyped(evt);
            }
        });
        getContentPane().add(ls, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 240, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IM/MobileImages/Adminandro.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 600));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        clear();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        if (manageSensorDetails.fieldID.isEmpty() || manageSensorDetails.cropType.isEmpty() || sms.getText().trim().isEmpty()
                || sts.getText().trim().isEmpty() || ats.getText().trim().isEmpty() || sas.getText().trim().isEmpty()
                || ls.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please Provide all the necessary Details", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            for (sensorDetails sensor : theSensors) {
                if (sensor.getfieldID().equals(manageSensorDetails.fieldID)) {
                    searchSensors.addSensorDetails(sensor);
                    sensor.print();
                }

            }

            if (searchSensors.size() > 0) {

                DateFormat format = new SimpleDateFormat("EEE MMM d HH:mm:ss Z yyyy");
                long MAX_DURATION = 3 * 60 * 1000;//to get the maximum duration of 3 min.
                try {
                    sensorDetails sensor = searchSensors.elementAt(searchSensors.size() - 1);
                    System.out.println(sensor.getDate());
                    Calendar previous = Calendar.getInstance();
                    previous.setTime(format.parse(sensor.getDate()));
                    Calendar now = Calendar.getInstance();

                    long duration = now.getTimeInMillis() - previous.getTimeInMillis();

                    if (duration >= MAX_DURATION) {

                        getDetails();
                    } else {
                        JOptionPane.showMessageDialog(this, "Please try again after 3 minutes", "Error", JOptionPane.ERROR_MESSAGE);
                        clear();
                    }
                } catch (Exception ex) {

                }

            } else {
                getDetails();
            }

        }

    }//GEN-LAST:event_jButton3MouseClicked

    /**
     *
     * @param fieldId
     * @param AirTempreture
     * @return
     */
    public String calculateSaturationVapourPressure(String fieldId, double AirTempreture) {
        String pressureResult = "", status = "";
        double minTemp = 0, maxTemp = 0, saturationVapourPressure = 0, nowPressure = 0;
        for (farms farm : thefarms) {

            if (farm.getfarmNumber() == Integer.parseInt(fieldId)) {
                minTemp = farm.getMinTemp();
                maxTemp = farm.getMaxTemp();
                saturationVapourPressure = farm.getSaturationVapourPressure();
                break;
            }
        }

        if (minTemp > AirTempreture) {
            minTemp = AirTempreture;
        }
        if (maxTemp < AirTempreture) {
            maxTemp = AirTempreture;
        }

        double pressureMax = 0.6108 * (Math.exp((17.27 * (maxTemp)) / (maxTemp + 237.3)));
        double pressureMin = 0.6108 * (Math.exp((17.27 * (minTemp)) / (minTemp + 237.3)));
        nowPressure = (pressureMax + pressureMin) / 2;

        if (saturationVapourPressure > nowPressure) {
            pressureResult = "down";
        } else {
            pressureResult = "up";
        }

        for (farms farm : thefarms) {

            if (farm.getfarmNumber() == Integer.parseInt(fieldId)) {
                try {
                    farm.setMaxTemp(maxTemp);
                    farm.setMinTemp(minTemp);
                    farm.setSaturationVapourPressure(nowPressure);
                    Serialization.Serialize(thefarms, FILE_NAME_farms);
                } catch (Exception ex) {
                    System.out.println("Error updating min max values of fields");
                }
                break;
            }
        }

        return pressureResult;
    }

    /**
     *
     */
    public void getDetails() {
        double SoilMoisture, SoilTemperature, AirTemperature, SoilAcidity, Lights_Sensor;
        String fieldID = manageSensorDetails.fieldID;
        String crop = manageSensorDetails.cropType;
        SoilMoisture = Double.parseDouble(sms.getText().trim());
        SoilTemperature = Double.parseDouble(sts.getText().trim());
        AirTemperature = Double.parseDouble(ats.getText().trim());
        SoilAcidity = Double.parseDouble(sas.getText().trim());
        Lights_Sensor = Double.parseDouble(ls.getText().trim());
        String status = addDetails(fieldID, crop, SoilMoisture, SoilTemperature, AirTemperature, SoilAcidity, Lights_Sensor);
        if (status == "success") {
            clear();
        }
    }

    /**
     *
     * @param fieldID
     * @param Crop
     * @param SoilMoisture
     * @param SoilTemperature
     * @param AirTemperature
     * @param SoilAcidity
     * @param Lights_Sensor
     * @return
     */
    public String addDetails(String fieldID, String Crop, double SoilMoisture, double SoilTemperature, double AirTemperature, double SoilAcidity, double Lights_Sensor) {
        String status = "";

        sensorDetails s1 = new sensorDetails();
        sensorDetails s2 = new sensorDetails();
        sensorDetails s3 = new sensorDetails();
        sensorDetails s4 = new sensorDetails();
        sensorDetails s5 = new sensorDetails();

        s1.setBehaviour(new Soil_Moisture(Crop));
        s2.setBehaviour(new Soil_Temperature());
        s3.setBehaviour(new Air_Temperature());
        s4.setBehaviour(new Soil_Acidity());
        s5.setBehaviour(new Lights_Sensor());

        String SoilMoistureSol = s1.checkSolution(SoilMoisture);
        String SoilTemperatureSol = s2.checkSolution(SoilTemperature);
        String AirTemperatureSol = s3.checkSolution(AirTemperature);
        String SoilAciditySol = s4.checkSolution(SoilAcidity);
        String Lights_SensorSol = s5.checkSolution(Lights_Sensor);

        String dateTime = Calendar.getInstance().getTime().toString();

        theSensors.addSensorDetails(new sensorDetails(dateTime, fieldID, SoilMoisture, SoilTemperature, AirTemperature, SoilAcidity, Lights_Sensor));
        try {
            Serialization.Serialize(theSensors, FILE_NAME_Sensors);
            JOptionPane.showMessageDialog(this, "Please take the below steps : \n \u2022" + SoilMoistureSol + "\n \u2022" + SoilTemperatureSol + "\n \u2022"
                    + AirTemperatureSol + "\n \u2022" + SoilAciditySol + "\n \u2022" + Lights_SensorSol + "\n Above Solutions may increase plant growth and yield \n \u2022 Mean Saturation Vapour Pressure has gone " + calculateSaturationVapourPressure(fieldID, AirTemperature),
                    "Information", JOptionPane.INFORMATION_MESSAGE);
            status = "success";
        } catch (IOException | HeadlessException ex) {
            status = "fail";
            System.out.println(ex.getMessage());
        }
        return status;
    }

    /**
     *
     */
    public void clear() {
        sms.setText("Soil Moisture Sensor (%)");
        sts.setText("Soil Temperature Sensor (RH)");
        ats.setText("Air Temperature Sensor (°C)");
        sas.setText("Soil Acidity Sensor (pH)");
        ls.setText("Lights Sensor (W/m²)");

        theSensors.removeAll(theSensors);

        try {
            for (sensorDetails sensorDetails : Serialization.deserializeSensors()) {
                theSensors.addSensorDetails(sensorDetails);
                sensorDetails.print();
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        manageSensorDetails m=new manageSensorDetails(username, userLevel, email);
        m.setVisible(true);
        this.hide();
       thefarms.removeAll(thefarms);
       theSensors.removeAll(theSensors);
       searchSensors.removeAll(searchSensors);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitMouseClicked

    private void smsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_smsKeyTyped
        validations.validateNumber(sms, evt);
    }//GEN-LAST:event_smsKeyTyped

    private void stsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stsKeyTyped
        validations.validateNumber(sts, evt);
    }//GEN-LAST:event_stsKeyTyped

    private void atsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_atsKeyTyped
        validations.validateNumber(ats, evt);
    }//GEN-LAST:event_atsKeyTyped

    private void sasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sasKeyTyped
        validations.validateNumber(sas, evt);
    }//GEN-LAST:event_sasKeyTyped

    private void lsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lsKeyTyped
        validations.validateNumber(ls, evt);
    }//GEN-LAST:event_lsKeyTyped

    private void smsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_smsMouseClicked
        sms.setText("");
    }//GEN-LAST:event_smsMouseClicked

    private void stsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stsMouseClicked
        sts.setText("");
    }//GEN-LAST:event_stsMouseClicked

    private void atsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_atsMouseClicked
        ats.setText("");
    }//GEN-LAST:event_atsMouseClicked

    private void sasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sasMouseClicked
        sas.setText("");
    }//GEN-LAST:event_sasMouseClicked

    private void lsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsMouseClicked
        ls.setText("");
    }//GEN-LAST:event_lsMouseClicked

    private void atsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(enterSensorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(enterSensorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(enterSensorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(enterSensorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new enterSensorDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ats;
    private javax.swing.JLabel exit;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField ls;
    private javax.swing.JTextField sas;
    private javax.swing.JTextField sms;
    private javax.swing.JTextField sts;
    // End of variables declaration//GEN-END:variables
}
